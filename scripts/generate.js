const fs = require("fs");
const path = require("path");

const chainsDir = path.join(__dirname, "../data/chains");
const typesDir = path.join(__dirname, "../types");

const generatePinaxIdType = () => {
  const excludedFile = "index.ts";
  const pinaxTypesFile = path.join(typesDir, "pinax.types.ts");

  // Scan the chains directory
  fs.readdir(chainsDir, (err, files) => {
    if (err) {
      console.error("Error reading chains directory:", err);
      return;
    }

    // Filter out the excluded file
    const filteredFiles = files.filter((file) => file !== excludedFile);

    // Extract the file names without the extension
    const fileNames = filteredFiles.map((file) => path.parse(file).name);

    // Generate the PinaxId type definition
    const pinaxIdType = `// This file is auto-generated on pre-commit to avoid maintaining it / circular dependencies.\n// Do not modify manually as it will be overwritten.\n// Last generation on ${new Date().toLocaleString()}.\nexport type PinaxId = '${fileNames.join("' | '")}'`;

    // Write the PinaxId type definition to the types directory
    fs.writeFile(pinaxTypesFile, pinaxIdType, (err) => {
      if (err) {
        console.error("Error writing pinax.types.ts file:", err);
        return;
      }

      console.log("pinax.types.ts file generated successfully!");
    });
  });
};

function generateChainsIndex() {
  const files = fs.readdirSync(chainsDir);
  const autogeneratedComment = `// This file is auto-generated on pre-commit to avoid maintaining it.\n// Do not modify manually as it will be overwritten.\n// Last generation on ${new Date().toLocaleString()}.\n`;
  const exportStatements = files
    .filter((file) => file !== "index.ts")
    .map((file) => `export * from './${file.slice(0, -3)}';`);
  const indexContent = [autogeneratedComment, ...exportStatements].join("\n");
  fs.writeFileSync(path.join(chainsDir, "index.ts"), indexContent);
}

generateChainsIndex();
generatePinaxIdType();
