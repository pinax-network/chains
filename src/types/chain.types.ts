import { BlockType } from './block.types';
import { GraphID } from './graph.types';
import { PinaxID } from './pinax.types';
import { ConsensusLayerServices, SupportedServices } from './service.types';
import { Standard } from './standard.types';

export type ChainBase = {
  // Testnet ID
  id: PinaxID;

  // Testnet Name
  name: string;

  // The Graph ID
  // See docs/retrieve_graph_ids.md
  graph_id: GraphID | null;

  // Display Priority, lower is higher
  index?: number;

  // Alternative Names
  alt_names: string[];
};

export type ConsensusLayer = ChainBase & {
  // Whether or not the chain supports our existing services
  // Consensus Layers exist only for services built on top of RPC
  // (Firehose, Substreams), and not for the RPC service itself.
  supported_services: ConsensusLayerServices;
};
export type Testnet = ChainBase & {
  // Whether or not the chain supports our existing services
  supported_services: SupportedServices;
};

/**
 * Describes the Data that needs to be provided for a Chain.
 *
 * The Chain type theb extends the Chain type to include
 * the generated fields.
 */
export interface Chain extends ChainBase {
  // Chain Standard (ie. ERC20)
  standard: Standard | null;

  // Block Type
  block_type: BlockType;

  icon: {
    // Token Icon ID
    id: string;

    // Theme of the Icon brand
    brand_theme: 'light' | 'dark' | 'both';

    // Generated by ./scripts/generate/data_json.js
    variants?: Array<'branded' | 'mono'>;
  };

  // Whether or not the chain supports our existing services
  supported_services: SupportedServices;

  // Merged by ./scripts/generate/data_json.js
  testnets?: Array<Testnet>;

  // Merged by ./scripts/generate/data_json.js
  consensus_layers?: Array<ConsensusLayer>;

  // Any additional metadata we want to store (ie. Wagmi)
  // metadata: any | null;
}
